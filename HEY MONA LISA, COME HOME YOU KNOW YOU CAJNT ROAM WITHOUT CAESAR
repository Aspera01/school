using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Sockets;
using System.Text;
using System.Threading.Tasks;
using static System.Net.Mime.MediaTypeNames;

namespace come_home_monalis_you_know_cant_rome_without_caesar
{
    internal class Program
    {
        static List<char> _alphabet = new List<char> { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'};
        static List<char> _specchar = new List<char> { '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '-', '_', '+', '=', '[', ']', '{', '}',';','"',':','\'','<','>',',','.','/','?','\\','|',' ' };
        static List<char> _nums = new List<char> {'1','2','3','4','5','6','7','8','9','0' };
        static string _keyWord = "";
        static void Main(string[] args)
        {
            MEMEME();
        }
        //unreal real main
        static void MEMEME()
        {
            char choice = ' ';
            string key = "";
            bool thing = true;

            while (thing)
            {
                List<char> caesared = new List<char>();
                key = "";
                _keyWord = "";
                Console.WriteLine("To cipher (C) or de-cipher? (D)");
                choice = Convert.ToChar(Console.ReadLine().ToUpper());

                if (choice == 'C')
                {
                    Console.WriteLine("Input key: ");
                    key = Console.ReadLine().ToUpper();
                    Console.Clear();
                    Console.WriteLine("Input words to cipher");
                    _keyWord = Console.ReadLine().ToUpper();
                    Console.Clear();
                    shifter(_alphabet, caesared, _specchar, _nums, key, _keyWord);
                    //cipherer(keyWord, caesared, _alphabet);
                    SecretWriter(cipherer(_keyWord, caesared, _alphabet), choice);
                    thing = false;
                }
                else if (choice == 'D')
                {
                    Console.WriteLine("Input key: ");
                    key = Console.ReadLine().ToUpper();
                    Console.Clear();
                    Console.WriteLine("Input words to cipher");
                    _keyWord = SecretReader(_keyWord);
                    Console.Clear();
                    shifter(_alphabet, caesared, _specchar, _nums, key, _keyWord);
                    decipherer(_keyWord, caesared, _alphabet);
                    thing = false;
                }
                else
                {
                    Console.WriteLine("invalid answer, pick again!");
                    Console.ReadKey();
                    Console.Clear();
                }
            }
            Console.WriteLine("\nYour command has been finished");
            Console.ReadKey();

        }
        //shifter
        static void shifter(List<char> _alphabet, List<char> _caesared, List<char> _specchar, List<char> _nums, string key, string _keyWord)
        {
            string[] filtered = new string[_keyWord.Length];
            for (int i = 0; i < key.Length; i++)
            {
                if (!_caesared.Contains(key[i]))
                {
                    if (!_specchar.Contains(key[i]) && !_nums.Contains(key[i]))
                    {
                        _caesared.Add(key[i]);
                    }                 
                }       
            }
            for (int j = 0; j < _alphabet.Count; j++)
            {
                if (!_caesared.Contains(_alphabet[j]))
                {
                    
                    _caesared.Add(_alphabet[j]);
                    
                }
            }
        }
        //cipherer
        static string[] cipherer(string _keyWord, List<char> _caesared, List<char> _alphabet)
        {
            string[] secret = new string[_keyWord.Length];
            for (int x = 0; x < _keyWord.Length; x++)
            {
                for (int y = 0; y < _caesared.Count; y++)
                {
                    if (_specchar.Contains(_keyWord[x]) || _nums.Contains(_keyWord[x]))
                    {
                        secret[x] = _keyWord[x] + "";
                        break;
                    }
                   
                    if (_keyWord[x] == _alphabet[y])
                    {                       

                        secret[x] = _caesared[y] + "";
                        break;
                        
                    }

                    else if (_keyWord[x] == ' ')
                    {
                        secret[x] = " ";
                    }
                }
            }
            return secret;
        }

        //de-cipherer
        static string[] decipherer(string keyWord, List<char> _caesared, List<char> _alphabet)
        {
            string[] unsecret = new string[keyWord.Length];
            for (int x = 0; x < keyWord.Length; x++)
            {
                for (int y = 0; y < _caesared.Count; y++)
                {
                    if (_specchar.Contains(_keyWord[x]) || _nums.Contains(_keyWord[x]))
                    {
                        unsecret[x] = _keyWord[x] + "";
                        break;
                    }
                    if (keyWord[x] == _caesared[y])
                    {
                        unsecret[x] = _alphabet[y] + "";
                        break;
                    }
                    else if (keyWord[x] == ' ')
                    {
                        unsecret[x] = " ";
                    }
                }
            }
            Console.WriteLine("The decoded message is: ");
            foreach(string w in unsecret)
            {
                Console.Write(w);
            }
            return unsecret;
        }

        //fileReader
        static void SecretWriter(string[] keyWord, char choice)
        {
            if (choice == 'C')
            {
                using (StreamWriter sw = new StreamWriter("secret.txt"))
                {
                    foreach (string w in keyWord)
                    {
                        sw.Write(w);
                    }
                }
            }
        }
        //fileWriter
        static string SecretReader (string _keyWord)
        {

            string scanned = "";
            using (StreamReader sr = new StreamReader("secret.txt"))
            {
                while ((scanned = sr.ReadLine()) != null)
                {
                    _keyWord = scanned;
                }
            }
            return _keyWord;
            

        }

    }
}

