using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MAchine_PRoblem__Reformat_
{
    internal class Program
    {

        static void Main(string[] args)
        {
            //setup reader
            Dictionary<string, string> setup = new Dictionary<string, string>();
            string[] inst = new string[] { };
            string line = "";
            int CharPerLine = 0;
            int Indent = 0;
            string InFile = "";
            string OuTFile = "";
            using (StreamReader sr = new StreamReader("Setup.ini"))
            {
                int w = 0;
                while ((line = sr.ReadLine()) != null)
                {
                    w = 1;
                    inst = line.Split('=');
                    for (int x = 0; x < 1; x++)
                    {
                        setup.Add(inst[x], inst[w]);
                    }
                }
            }

            for (int y = 0; y < setup.Count; y++)
            {
                if (setup.ElementAt(y).Key == "CharPerLine")
                    CharPerLine = int.Parse(setup.ElementAt(y).Value);
                if (setup.ElementAt(y).Key == "Indent")
                    Indent = int.Parse(setup.ElementAt(y).Value);
                if (setup.ElementAt(y).Key == "InFile")
                    InFile = setup.ElementAt(y).Value;
                if (setup.ElementAt(y).Key == "OuTFile")
                    OuTFile = setup.ElementAt(y).Value;
            }

            Console.WriteLine("Config has been set.");
            Console.ReadKey();

            //txt file reader
            List<string> words = new List<string>();
            string[] word = new string[] { };
            string text = "";
            int xx = 0;

            using (StreamReader sr = new StreamReader(InFile))
            {
                while ((text = sr.ReadLine()) != null)
                {
                    xx = 0;
                    word = text.Split(' ');
                    for(xx = 0; xx < word.Length; xx++)
                    {
                        words.Add(word[xx]);
                    }

                }
                Console.WriteLine("text file has been read");
                
            }
            Console.ReadKey();

            //This section checks the character per line.
            List<string> OutWords = new List<string> { };
            int LineLength = 0;
            int LetCount = 0;
            string real = "";
            bool done = false;
            //bool inner = false;

            while (done == false)
            {

                LetCount = words[0].Length;
                LineLength = LineLength + LetCount;             //100 char per line is complete
                if(LetCount == 0)
                {
                    OutWords.Add("nextline");
                    LineLength = 0;
                }
                if (LineLength < CharPerLine)
                {
                    OutWords.Add(words[0]);
                    words.RemoveAt(0);
                }
                if (LineLength > CharPerLine)
                {
                    OutWords.Add("kill");
                    LineLength = 0;
                }
                if(words.Count == 0)
                {
                    done = true;
                }
            }
            Console.Write("finished");
            Console.ReadKey();
            //ez display

            using (StreamWriter sw = new StreamWriter(OuTFile))
            {

                for (int z = 0; z < 10; z++)
                {
                    sw.Write(' ');
                }
                while (OutWords.Count > 0)
                {
                    if (OutWords[0] == "kill")
                    {
                        sw.Write("\n");
                        OutWords.RemoveAt(0);
                    }
                    if (OutWords[0] == "nextline")
                    {
                        sw.Write("\n");
                        sw.Write("\n");
                        for (int zzz = 0; zzz < 10; zzz++)
                        {
                            sw.Write(' ');
                        }
                        OutWords.RemoveAt(0);
                    }
                    if (OutWords[0] != "kill" || OutWords[0] != "nextline")
                    {
                        sw.Write(OutWords[0] + ' ');
                        OutWords.RemoveAt(0);
                    }

                }
            }
            Console.Write("finish");
            Console.ReadKey();
           
        }
    }
}
